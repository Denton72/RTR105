user@epk428-1:~$ git clone https://github.com/Denton72/RTR105
Cloning into 'RTR105'...
remote: Counting objects: 42, done.
remote: Compressing objects: 100% (38/38), done.
remote: Total 42 (delta 12), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (42/42), done.
Checking connectivity... done.
user@epk428-1:~$ ls
Desktop    Downloads  Pictures  RTR105     Videos
Documents  Music      Public    Templates  VirtualBox VMs
user@epk428-1:~$ cd /RTR105
bash: cd: /RTR105: No such file or directory
user@epk428-1:~$ CD RTR105/
CD: command not found
user@epk428-1:~$ cd RTR105/
user@epk428-1:~/RTR105$ python
Python 3.6.4 |Anaconda, Inc.| (default, Jan 16 2018, 18:10:19) 
[GCC 7.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> vars()
{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>}
>>> __builtins__
<module 'builtins' (built-in)>
>>> __builtins__.__doc__
"Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices."
>>> print(__builtins__.__doc__)
Built-in functions, exceptions, and other objects.

Noteworthy: None is the `nil' object; Ellipsis represents `...' in slices.
>>> printf(__builtins__.__doc__)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'printf' is not defined
>>> a = 10
>>> vars()
{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>, 'a': 10}
>>> a = 20
>>> vars()
{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>, 'a': 20}
>>> a
20
>>> a+5
25
>>> ab=a+b
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'b' is not defined
>>> ab = a + b
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'b' is not defined
>>> ab = a+b
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'b' is not defined
>>> b = 5.55
>>> ab = a + b
>>> c = 'A'
>>> print(a.__doc__)
int(x=0) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4
>>> print(b.__doc__)
float(x) -> floating point number

Convert a string or number to a floating point number, if possible.
>>> print(c.__doc__)
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.
>>> c
'A'
>>> print(c)
A
>>> print(c+c)
AA
>>> print (c+a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: must be str, not int
>>> print (c a)
  File "<stdin>", line 1
    print (c a)
             ^
SyntaxError: invalid syntax
>>> print (ca)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'ca' is not defined
